module BF2;

import "lib/array.rbcvm";
import "lib/hashmap.rbcvm";
import "lib/obj.rbcvm";


let Tape = Obj.class(null, HashMap.make(function(set) {
  set("init", function(self) {
    Obj.setattr(self, "pos", 0);
    Obj.setattr(self, "data", [0]);
  });

  set("get", function(self) {
    return Obj.getattr(self, "data")[Obj.getattr(self, "pos")];
  });

  set("inc", function(self, amount) {
    let data = Obj.getattr(self, "data");
    let pos = Obj.getattr(self, "pos");
    data[pos] = data[pos] + amount;
  });

  set("move", function(self, amount) {
    let new_pos = Obj.getattr(self, "pos") + amount;
    Obj.setattr(self, "pos", new_pos);
    let data = Obj.getattr(self, "data");
    if new_pos >= Array.length(data) {
      let len = Array.length(data);
      let new_data = Array.new(len + 1);
      new_data[len] = 0;
      Array.foreach(data, function(v, i) {
        new_data[i] = v;
      });
      Obj.setattr(self, "data", new_data);
    }
  });
}));

let OP_INC = 0;
let OP_MOVE = 1;
let OP_LOOP = 2;
let OP_PRINT = 3;

function op(type, value) {
  return [type, value];
}

function _bf_parse(next_char) {
  let code = ArrayList.new();

  for let c; (c = next_char()) != null; {
    if c == '+' {
      ArrayList.push(code, op(OP_INC, 1));
    } else if c == '-' {
      ArrayList.push(code, op(OP_INC, -1));
    } else if c == '>' {
      ArrayList.push(code, op(OP_MOVE, 1));
    } else if c == '<' {
      ArrayList.push(code, op(OP_MOVE, -1));
    } else if c == '.' {
      ArrayList.push(code, op(OP_PRINT, null));
    } else if c == '[' {
      ArrayList.push(code, op(OP_LOOP, _bf_parse(next_char)));
    } else if c == ']' {
      break;
    }
  }

  return ArrayList.to_array(code);
}

function bf_parse(program) {
  return _bf_parse(Iter.from_array(String.chars(program)));
}

function _bf_run(ops, tape) {
  Iter.foreach(ops, function(op) {
    let type = op[0];
    let value = op[1];

    if type == OP_INC {
      Obj.send(tape, "inc", value);
    } else if type == OP_MOVE {
      Obj.send(tape, "move", value);
    } else if type == OP_PRINT {
      print(chr(Obj.send(tape, "get", null)));
    } else if type == OP_LOOP {
      while Obj.send(tape, "get", null) != 0 {
        _bf_run(Iter.from_array(value), tape);
      }
    }
  });
}

function bf_run(ops) {
  _bf_run(Iter.from_array(ops), Obj.new(Tape, null));
}

let hello = "
[ This program prints \"Hello World!\" and a newline to the screen, its
  length is 106 active command characters. [It is not the shortest.]

  This loop is an \"initial comment loop\", a simple way of adding a comment
  to a BF program such that you don't have to worry about any command
  characters. Any '.', ',', '+', '-', '<' and '>' characters are simply
  ignored, the '[' and ']' characters just have to be balanced. This
  loop and the commands it contains are ignored because the current cell
  defaults to a value of 0; the 0 value causes this loop to be skipped.
]
++++++++               Set Cell #0 to 8
[
    >++++               Add 4 to Cell #1; this will always set Cell #1 to 4
    [                   as the cell will be cleared by the loop
        >++             Add 2 to Cell #2
        >+++            Add 3 to Cell #3
        >+++            Add 3 to Cell #4
        >+              Add 1 to Cell #5
        <<<<-           Decrement the loop counter in Cell #1
    ]                   Loop till Cell #1 is zero; number of iterations is 4
    >+                  Add 1 to Cell #2
    >+                  Add 1 to Cell #3
    >-                  Subtract 1 from Cell #4
    >>+                 Add 1 to Cell #6
    [<]                 Move back to the first zero cell you find; this will
                        be Cell #1 which was cleared by the previous loop
    <-                  Decrement the loop Counter in Cell #0
]                       Loop till Cell #0 is zero; number of iterations is 8

The result of this is:
Cell No :   0   1   2   3   4   5   6
Contents:   0   0  72 104  88  32   8
Pointer :   ^

>>.                     Cell #2 has value 72 which is 'H'
>---.                   Subtract 3 from Cell #3 to get 101 which is 'e'
+++++++..+++.           Likewise for 'llo' from Cell #3
>>.                     Cell #5 is 32 for the space
<-.                     Subtract 1 from Cell #4 for 87 to give a 'W'
<.                      Cell #3 was set to 'o' from the end of 'Hello'
+++.------.--------.    Cell #3 for 'rl' and 'd'
>>+.                    Add 1 to Cell #5 gives us an exclamation point
>++.                    And finally a newline from Cell #6
";

bf_run(bf_parse(hello));
